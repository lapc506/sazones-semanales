// Mocks generated by Mockito 5.4.6 from annotations
// in sazones_semanales/test/application/use_cases/existencias/agregar_existencia_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:sazones_semanales/domain/entities/enums.dart' as _i5;
import 'package:sazones_semanales/domain/entities/existencia.dart' as _i4;
import 'package:sazones_semanales/domain/repositories/existencia_repository.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ExistenciaRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockExistenciaRepository extends _i1.Mock
    implements _i2.ExistenciaRepository {
  MockExistenciaRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Existencia>> obtenerExistenciasActivas() =>
      (super.noSuchMethod(
        Invocation.method(
          #obtenerExistenciasActivas,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Existencia>>.value(<_i4.Existencia>[]),
      ) as _i3.Future<List<_i4.Existencia>>);

  @override
  _i3.Future<List<_i4.Existencia>> obtenerExistenciasArchivadas() =>
      (super.noSuchMethod(
        Invocation.method(
          #obtenerExistenciasArchivadas,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Existencia>>.value(<_i4.Existencia>[]),
      ) as _i3.Future<List<_i4.Existencia>>);

  @override
  _i3.Future<List<_i4.Existencia>> obtenerExistenciasPorEstado(
          _i5.EstadoExistencia? estado) =>
      (super.noSuchMethod(
        Invocation.method(
          #obtenerExistenciasPorEstado,
          [estado],
        ),
        returnValue: _i3.Future<List<_i4.Existencia>>.value(<_i4.Existencia>[]),
      ) as _i3.Future<List<_i4.Existencia>>);

  @override
  _i3.Future<List<_i4.Existencia>> obtenerExistenciasProximasACaducar() =>
      (super.noSuchMethod(
        Invocation.method(
          #obtenerExistenciasProximasACaducar,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Existencia>>.value(<_i4.Existencia>[]),
      ) as _i3.Future<List<_i4.Existencia>>);

  @override
  _i3.Future<List<_i4.Existencia>> obtenerExistenciasCaducadas() =>
      (super.noSuchMethod(
        Invocation.method(
          #obtenerExistenciasCaducadas,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Existencia>>.value(<_i4.Existencia>[]),
      ) as _i3.Future<List<_i4.Existencia>>);

  @override
  _i3.Future<List<_i4.Existencia>> buscarPorCodigoBarras(
          String? codigoBarras) =>
      (super.noSuchMethod(
        Invocation.method(
          #buscarPorCodigoBarras,
          [codigoBarras],
        ),
        returnValue: _i3.Future<List<_i4.Existencia>>.value(<_i4.Existencia>[]),
      ) as _i3.Future<List<_i4.Existencia>>);

  @override
  _i3.Future<List<_i4.Existencia>> buscarPorNombreProducto(String? nombre) =>
      (super.noSuchMethod(
        Invocation.method(
          #buscarPorNombreProducto,
          [nombre],
        ),
        returnValue: _i3.Future<List<_i4.Existencia>>.value(<_i4.Existencia>[]),
      ) as _i3.Future<List<_i4.Existencia>>);

  @override
  _i3.Future<List<_i4.Existencia>> obtenerExistenciasPorProveedor(
          String? proveedorId) =>
      (super.noSuchMethod(
        Invocation.method(
          #obtenerExistenciasPorProveedor,
          [proveedorId],
        ),
        returnValue: _i3.Future<List<_i4.Existencia>>.value(<_i4.Existencia>[]),
      ) as _i3.Future<List<_i4.Existencia>>);

  @override
  _i3.Future<List<_i4.Existencia>> obtenerExistenciasPorCategoria(
          String? categoria) =>
      (super.noSuchMethod(
        Invocation.method(
          #obtenerExistenciasPorCategoria,
          [categoria],
        ),
        returnValue: _i3.Future<List<_i4.Existencia>>.value(<_i4.Existencia>[]),
      ) as _i3.Future<List<_i4.Existencia>>);

  @override
  _i3.Future<List<_i4.Existencia>> obtenerExistenciasPorRangoFechas(
    DateTime? fechaInicio,
    DateTime? fechaFin,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #obtenerExistenciasPorRangoFechas,
          [
            fechaInicio,
            fechaFin,
          ],
        ),
        returnValue: _i3.Future<List<_i4.Existencia>>.value(<_i4.Existencia>[]),
      ) as _i3.Future<List<_i4.Existencia>>);

  @override
  _i3.Future<_i4.Existencia?> obtenerExistenciaPorId(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #obtenerExistenciaPorId,
          [id],
        ),
        returnValue: _i3.Future<_i4.Existencia?>.value(),
      ) as _i3.Future<_i4.Existencia?>);

  @override
  _i3.Future<void> guardarExistencia(_i4.Existencia? existencia) =>
      (super.noSuchMethod(
        Invocation.method(
          #guardarExistencia,
          [existencia],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> actualizarExistencia(_i4.Existencia? existencia) =>
      (super.noSuchMethod(
        Invocation.method(
          #actualizarExistencia,
          [existencia],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> marcarComoConsumida(String? existenciaId) =>
      (super.noSuchMethod(
        Invocation.method(
          #marcarComoConsumida,
          [existenciaId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> marcarComoCaducada(String? existenciaId) =>
      (super.noSuchMethod(
        Invocation.method(
          #marcarComoCaducada,
          [existenciaId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> marcarMultiplesComoConsumidas(List<String>? existenciaIds) =>
      (super.noSuchMethod(
        Invocation.method(
          #marcarMultiplesComoConsumidas,
          [existenciaIds],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> eliminarExistencia(String? existenciaId) =>
      (super.noSuchMethod(
        Invocation.method(
          #eliminarExistencia,
          [existenciaId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<Map<String, dynamic>> obtenerEstadisticasPrecios(
          String? nombreProducto) =>
      (super.noSuchMethod(
        Invocation.method(
          #obtenerEstadisticasPrecios,
          [nombreProducto],
        ),
        returnValue:
            _i3.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i3.Future<Map<String, dynamic>>);

  @override
  _i3.Future<List<Map<String, dynamic>>> obtenerGastosPorCategoria(
    DateTime? fechaInicio,
    DateTime? fechaFin,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #obtenerGastosPorCategoria,
          [
            fechaInicio,
            fechaFin,
          ],
        ),
        returnValue: _i3.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i3.Future<List<Map<String, dynamic>>>);

  @override
  _i3.Future<List<Map<String, dynamic>>> obtenerGastosPorProveedor(
    DateTime? fechaInicio,
    DateTime? fechaFin,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #obtenerGastosPorProveedor,
          [
            fechaInicio,
            fechaFin,
          ],
        ),
        returnValue: _i3.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i3.Future<List<Map<String, dynamic>>>);

  @override
  _i3.Future<List<Map<String, dynamic>>> obtenerHistorialPrecios(
          String? nombreProducto) =>
      (super.noSuchMethod(
        Invocation.method(
          #obtenerHistorialPrecios,
          [nombreProducto],
        ),
        returnValue: _i3.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i3.Future<List<Map<String, dynamic>>>);

  @override
  _i3.Future<List<Map<String, dynamic>>> obtenerProductosMasComprados(
          {int? limite = 10}) =>
      (super.noSuchMethod(
        Invocation.method(
          #obtenerProductosMasComprados,
          [],
          {#limite: limite},
        ),
        returnValue: _i3.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i3.Future<List<Map<String, dynamic>>>);

  @override
  _i3.Future<List<Map<String, dynamic>>> obtenerPatronesConsumo(
          String? nombreProducto) =>
      (super.noSuchMethod(
        Invocation.method(
          #obtenerPatronesConsumo,
          [nombreProducto],
        ),
        returnValue: _i3.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i3.Future<List<Map<String, dynamic>>>);

  @override
  _i3.Future<Map<_i5.EstadoExistencia, int>> contarExistenciasPorEstado() =>
      (super.noSuchMethod(
        Invocation.method(
          #contarExistenciasPorEstado,
          [],
        ),
        returnValue: _i3.Future<Map<_i5.EstadoExistencia, int>>.value(
            <_i5.EstadoExistencia, int>{}),
      ) as _i3.Future<Map<_i5.EstadoExistencia, int>>);

  @override
  _i3.Future<List<_i4.Existencia>> obtenerExistenciasConPaginacion({
    int? pagina = 0,
    int? tamanoPagina = 50,
    _i5.EstadoExistencia? estado,
    String? categoria,
    String? proveedorId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #obtenerExistenciasConPaginacion,
          [],
          {
            #pagina: pagina,
            #tamanoPagina: tamanoPagina,
            #estado: estado,
            #categoria: categoria,
            #proveedorId: proveedorId,
          },
        ),
        returnValue: _i3.Future<List<_i4.Existencia>>.value(<_i4.Existencia>[]),
      ) as _i3.Future<List<_i4.Existencia>>);

  @override
  _i3.Future<List<_i4.Existencia>> buscarExistenciasConFiltros({
    String? nombreProducto,
    String? categoria,
    String? proveedorId,
    _i5.EstadoExistencia? estado,
    _i5.TipoPerecibilidad? perecibilidad,
    DateTime? fechaCompraInicio,
    DateTime? fechaCompraFin,
    DateTime? fechaCaducidadInicio,
    DateTime? fechaCaducidadFin,
    double? precioMinimo,
    double? precioMaximo,
    int? limite = 50,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #buscarExistenciasConFiltros,
          [],
          {
            #nombreProducto: nombreProducto,
            #categoria: categoria,
            #proveedorId: proveedorId,
            #estado: estado,
            #perecibilidad: perecibilidad,
            #fechaCompraInicio: fechaCompraInicio,
            #fechaCompraFin: fechaCompraFin,
            #fechaCaducidadInicio: fechaCaducidadInicio,
            #fechaCaducidadFin: fechaCaducidadFin,
            #precioMinimo: precioMinimo,
            #precioMaximo: precioMaximo,
            #limite: limite,
          },
        ),
        returnValue: _i3.Future<List<_i4.Existencia>>.value(<_i4.Existencia>[]),
      ) as _i3.Future<List<_i4.Existencia>>);
}
