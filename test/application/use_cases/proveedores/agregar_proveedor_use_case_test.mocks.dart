// Mocks generated by Mockito 5.4.6 from annotations
// in sazones_semanales/test/application/use_cases/proveedores/agregar_proveedor_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:sazones_semanales/domain/entities/proveedor.dart' as _i4;
import 'package:sazones_semanales/domain/repositories/proveedor_repository.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ProveedorRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockProveedorRepository extends _i1.Mock
    implements _i2.ProveedorRepository {
  MockProveedorRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Proveedor>> obtenerProveedoresActivos() =>
      (super.noSuchMethod(
        Invocation.method(
          #obtenerProveedoresActivos,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Proveedor>>.value(<_i4.Proveedor>[]),
      ) as _i3.Future<List<_i4.Proveedor>>);

  @override
  _i3.Future<List<_i4.Proveedor>> obtenerTodosLosProveedores() =>
      (super.noSuchMethod(
        Invocation.method(
          #obtenerTodosLosProveedores,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Proveedor>>.value(<_i4.Proveedor>[]),
      ) as _i3.Future<List<_i4.Proveedor>>);

  @override
  _i3.Future<_i4.Proveedor?> obtenerProveedorPorId(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #obtenerProveedorPorId,
          [id],
        ),
        returnValue: _i3.Future<_i4.Proveedor?>.value(),
      ) as _i3.Future<_i4.Proveedor?>);

  @override
  _i3.Future<List<_i4.Proveedor>> buscarPorNombre(String? nombre) =>
      (super.noSuchMethod(
        Invocation.method(
          #buscarPorNombre,
          [nombre],
        ),
        returnValue: _i3.Future<List<_i4.Proveedor>>.value(<_i4.Proveedor>[]),
      ) as _i3.Future<List<_i4.Proveedor>>);

  @override
  _i3.Future<List<_i4.Proveedor>> obtenerProveedoresPorTipo(
          _i4.TipoProveedor? tipo) =>
      (super.noSuchMethod(
        Invocation.method(
          #obtenerProveedoresPorTipo,
          [tipo],
        ),
        returnValue: _i3.Future<List<_i4.Proveedor>>.value(<_i4.Proveedor>[]),
      ) as _i3.Future<List<_i4.Proveedor>>);

  @override
  _i3.Future<void> guardarProveedor(_i4.Proveedor? proveedor) =>
      (super.noSuchMethod(
        Invocation.method(
          #guardarProveedor,
          [proveedor],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> actualizarProveedor(_i4.Proveedor? proveedor) =>
      (super.noSuchMethod(
        Invocation.method(
          #actualizarProveedor,
          [proveedor],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> desactivarProveedor(String? proveedorId) =>
      (super.noSuchMethod(
        Invocation.method(
          #desactivarProveedor,
          [proveedorId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> activarProveedor(String? proveedorId) => (super.noSuchMethod(
        Invocation.method(
          #activarProveedor,
          [proveedorId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> eliminarProveedor(String? proveedorId) =>
      (super.noSuchMethod(
        Invocation.method(
          #eliminarProveedor,
          [proveedorId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<bool> tieneExistenciasAsociadas(String? proveedorId) =>
      (super.noSuchMethod(
        Invocation.method(
          #tieneExistenciasAsociadas,
          [proveedorId],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<Map<String, dynamic>> obtenerEstadisticasProveedor(
          String? proveedorId) =>
      (super.noSuchMethod(
        Invocation.method(
          #obtenerEstadisticasProveedor,
          [proveedorId],
        ),
        returnValue:
            _i3.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i3.Future<Map<String, dynamic>>);

  @override
  _i3.Future<List<Map<String, dynamic>>> obtenerHistorialCompras(
          String? proveedorId) =>
      (super.noSuchMethod(
        Invocation.method(
          #obtenerHistorialCompras,
          [proveedorId],
        ),
        returnValue: _i3.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i3.Future<List<Map<String, dynamic>>>);

  @override
  _i3.Future<List<Map<String, dynamic>>> obtenerProveedoresMasUtilizados(
          {int? limite = 10}) =>
      (super.noSuchMethod(
        Invocation.method(
          #obtenerProveedoresMasUtilizados,
          [],
          {#limite: limite},
        ),
        returnValue: _i3.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i3.Future<List<Map<String, dynamic>>>);

  @override
  _i3.Future<List<_i4.TipoProveedor>> obtenerTiposEnUso() =>
      (super.noSuchMethod(
        Invocation.method(
          #obtenerTiposEnUso,
          [],
        ),
        returnValue:
            _i3.Future<List<_i4.TipoProveedor>>.value(<_i4.TipoProveedor>[]),
      ) as _i3.Future<List<_i4.TipoProveedor>>);

  @override
  _i3.Future<Map<_i4.TipoProveedor, int>> contarProveedoresPorTipo() =>
      (super.noSuchMethod(
        Invocation.method(
          #contarProveedoresPorTipo,
          [],
        ),
        returnValue: _i3.Future<Map<_i4.TipoProveedor, int>>.value(
            <_i4.TipoProveedor, int>{}),
      ) as _i3.Future<Map<_i4.TipoProveedor, int>>);

  @override
  _i3.Future<List<_i4.Proveedor>> buscarProveedoresConFiltros({
    String? nombre,
    _i4.TipoProveedor? tipo,
    bool? activo,
    String? direccion,
    int? limite = 50,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #buscarProveedoresConFiltros,
          [],
          {
            #nombre: nombre,
            #tipo: tipo,
            #activo: activo,
            #direccion: direccion,
            #limite: limite,
          },
        ),
        returnValue: _i3.Future<List<_i4.Proveedor>>.value(<_i4.Proveedor>[]),
      ) as _i3.Future<List<_i4.Proveedor>>);

  @override
  _i3.Future<List<_i4.Proveedor>> obtenerProveedoresConPaginacion({
    int? pagina = 0,
    int? tamanoPagina = 50,
    _i4.TipoProveedor? tipo,
    bool? soloActivos = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #obtenerProveedoresConPaginacion,
          [],
          {
            #pagina: pagina,
            #tamanoPagina: tamanoPagina,
            #tipo: tipo,
            #soloActivos: soloActivos,
          },
        ),
        returnValue: _i3.Future<List<_i4.Proveedor>>.value(<_i4.Proveedor>[]),
      ) as _i3.Future<List<_i4.Proveedor>>);

  @override
  _i3.Future<bool> existeProveedorConNombre(
    String? nombre, {
    String? excluyendoId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #existeProveedorConNombre,
          [nombre],
          {#excluyendoId: excluyendoId},
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<List<String>> obtenerSugerenciasNombres(
    String? query, {
    int? limite = 10,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #obtenerSugerenciasNombres,
          [query],
          {#limite: limite},
        ),
        returnValue: _i3.Future<List<String>>.value(<String>[]),
      ) as _i3.Future<List<String>>);

  @override
  _i3.Future<List<Map<String, dynamic>>> exportarProveedores() =>
      (super.noSuchMethod(
        Invocation.method(
          #exportarProveedores,
          [],
        ),
        returnValue: _i3.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i3.Future<List<Map<String, dynamic>>>);

  @override
  _i3.Future<void> importarProveedores(List<_i4.Proveedor>? proveedores) =>
      (super.noSuchMethod(
        Invocation.method(
          #importarProveedores,
          [proveedores],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
